import barrileteCosmico.*

describe "Barrilete Cósmico" {
	
		var destinosDestacados
		var garlicSea
		var lastToninas
		var silversSea
		var goodAirs
		var pabloHari
		var descuentoVeinticincoPorciento
		var descuentoQuincePorciento
		
		fixture { 
			
			garlicSea = new Destino(
				nombre = "Garlic´s Sea",
				precioOriginal = 2500,
				equipaje = ["Caña de Pescar", "Piloto"]
			)
			
			silversSea = new Destino(
				nombre = "Silver's Sea",
				precioOriginal = 1350,
				equipaje = ["Protector Solar","Equipo de Buceo"]		
			)
			
			lastToninas = new Destino(
				nombre = "Last Toninas",
				precioOriginal = 3500,
				equipaje = ["Vacuna Gripal","Vacuna B","Necronomicon"]					
			)
			
			goodAirs= new Destino(
				nombre = "Good Airs",
				precioOriginal = 1500,
				equipaje = ["Cerveza","Protector Solar"]	
			)
				
			destinosDestacados = [garlicSea, lastToninas]
			barrileteCosmico.destinos([garlicSea,silversSea,lastToninas,goodAirs])
			
			pabloHari = new Usuario(
				nombreDeUsuario = "PHari",
				lugaresQueConoce = [lastToninas, goodAirs],
				dineroEnCuenta = 1500,
				usuariosQueSigue = []
			) 
			
			descuentoVeinticincoPorciento = new Descuento(porcentaje = 0.25)
			descuentoQuincePorciento = new Descuento (porcentaje = 0.15)
		}
	
	
	
	test "Los destinos mas importantes del barrilete cosmico son Garlic´s Sea y Last Toninas."{
		assert.equals(destinosDestacados, barrileteCosmico.obtenerDestinosDestacados())
	}
	
	test "Aplicar 25% de descuento a Last Toninas y obtener un precio de 2625."{
		lastToninas.aplicarDescuento(descuentoVeinticincoPorciento)
		assert.equals(2625, lastToninas.precio())
	}
			
	test "Aplicar 25% de descuento a Last Toninas y adquirir el certificado de descuento."{
		lastToninas.aplicarDescuento(descuentoVeinticincoPorciento)
		assert.that(lastToninas.poseeEnElEquipaje("Certificado de descuento"))
	}
	
	test "Silver's Sea no es un destino peligroso."{
		assert.notThat(silversSea.esPeligroso())
	}
	
	test "Aplicando un descuento del 15% a todos los destinos de Barrilete Cosmico se obtienen los precios descontados."{
		var preciosDeDestinosConDescuento = [2125, 1147.5, 2975, 1275]
		barrileteCosmico.aplicarDescuentosADestinos(descuentoQuincePorciento)
		assert.equals(preciosDeDestinosConDescuento, barrileteCosmico.preciosDeLosDestinos())
		}
	
	test "Aplicando un descuento del 15% a todos los destinos de Barrilete Cosmico todos obtienen el certificado."{
		barrileteCosmico.aplicarDescuentosADestinos(descuentoQuincePorciento)
		assert.that(barrileteCosmico.todosLosDestinosPoseen("Certificado de descuento"))
	}
	
	test "El destino mas peligroso es Last Toninas."{
		  assert.equals([lastToninas], barrileteCosmico.destinosPeligrosos())
	}
	
	test "Barrilete Cosmico es empresa extrema."{
		assert.that(barrileteCosmico.esEmpresaExtrema())
	}
	
	test "La carta de destinos de Barrilete Cosmico es Last Toninas, Garlic´s sea, Good Airs y Silver's Sea."{
		var cartaDeDestinos = ["Garlic´s Sea","Silver's Sea","Last Toninas","Good Airs"]
		assert.equals(cartaDeDestinos, barrileteCosmico.conocerCartaDeDestinos())
	}
	
	test "Los kilometros del usuario PHari son 500."{
		assert.equals(500, pabloHari.obtenerKilometros())
	}
	
	test "PHari puede volar a Silver´s Sea."{
		assert.that(pabloHari.puedeViajarA(silversSea))
	}
	
	test "PHari no puede volar a Silver's Sea." {
		pabloHari.descontarDeLaCuenta(1250)
		assert.throwsExceptionWithMessage("No se puede viajar al destino.", { pabloHari.volarADestino(silversSea) })
	}
	
	test "PHari realiza un viaje a Silver 's Sea y agrega el lugar a su historial."{
        pabloHari.volarADestino(silversSea)
        assert.that(pabloHari.viajoA(silversSea))
    }
	
	test "PHari posee $150 en su cuenta luego de volar a Silver´s Sea."{
		pabloHari.volarADestino(silversSea)
		assert.equals(150, pabloHari.dineroEnCuenta())
	}
}
